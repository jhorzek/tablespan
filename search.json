[{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jhorzek.github.io/tablespan/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jhorzek.github.io/tablespan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jannik H. Orzek. Maintainer.","code":""},{"path":"https://jhorzek.github.io/tablespan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Orzek JH (2024). tablespan: Create basic tables R. R package version 0.1.1, https://jhorzek.github.io/tablespan/.","code":"@Manual{,   title = {tablespan: Create basic tables with R},   author = {Jannik H. Orzek},   year = {2024},   note = {R package version 0.1.1},   url = {https://jhorzek.github.io/tablespan/}, }"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"tablespan","dir":"","previous_headings":"","what":"Create basic tables with R","title":"Create basic tables with R","text":"Create satisficing tables R formula way. objective tablespan provide “good enough” approach creating tables R simple formulas (inspired tables). end, tablespan builds awesome packages openxlsx gt. Tables created tablespan can exported : Excel (using openxlsx) HTML (using gt) LaTeX (using gt) RTF (using gt)","code":""},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create basic tables with R","text":"tablespan yet available CRAN. install GitHub, run following lines:","code":"library(remotes) remotes::install_github(\"jhorzek/tablespan\")"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Create basic tables with R","text":"tablespan assumes already perfectly summarized table now want share. need table headers spanners without investing much time making look perfect. tablespan designed . Let’s assume want share following table: Now want create table show grouping variables row names also create spanners horse power (hp) weight (wt) variables. result look something like :","code":"library(dplyr) data(\"mtcars\")  summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  print(summarized_table) #> # A tibble: 5 × 7 #> # Groups:   cyl [3] #>     cyl    vs     N mean_hp sd_hp mean_wt  sd_wt #>   <dbl> <dbl> <int>   <dbl> <dbl>   <dbl>  <dbl> #> 1     4     0     1    91   NA       2.14 NA     #> 2     4     1    10    81.8 21.9     2.30  0.598 #> 3     6     0     3   132.  37.5     2.76  0.128 #> 4     6     1     4   115.   9.18    3.39  0.116 #> 5     8     0    14   209.  51.0     4.00  0.759 |                   | Horse Power |   Weight  | | Cylinder | Engine | Mean  |  SD | Mean | SD | | -------- | ------ | ----- | --- | ---- | -- | |                   |                         |"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"creating-a-basic-table","dir":"","previous_headings":"Introduction","what":"Creating a Basic Table","title":"Create basic tables with R","text":"tablespan, table headers defined formula approach inspired tables package. example, cyl ~ mean_hp + sd_hp defines table cyl row names mean_hp sd_hp columns. output look follows: Note row names (cyl) separate block left.","code":"library(tablespan) tablespan(data = summarized_table,           formula = cyl ~ mean_hp + sd_hp) #>                          #>  | cyl | mean_hp sd_hp | #>  | --- - ------- ----- | #>  | 4   | 91            | #>  | 4   | 81.8    21.87 | #>  | 6   | 131.67  37.53 | #>  | ... | ...     ...   |"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"adding-spanners","dir":"","previous_headings":"Introduction","what":"Adding Spanners","title":"Create basic tables with R","text":"Spanners defined using braces spanner names. example, following defines spanner mean_hp sd_hp name Horsepower: cyl ~ (Horsepower = mean_hp + sd_hp). Spanners can also nested (e.g., cyl ~ (Horsepower = (Mean = mean_hp) + (SD  = sd_hp)).","code":"tablespan(data = summarized_table,           formula = cyl ~ (Horsepower = mean_hp + sd_hp)) #>                             #>  |     | Horsepower       | #>  | cyl | mean_hp    sd_hp | #>  | --- - ---------- ----- | #>  | 4   | 91               | #>  | 4   | 81.8       21.87 | #>  | 6   | 131.67     37.53 | #>  | ... | ...        ...   | tablespan(data = summarized_table,           formula = cyl ~ (Horsepower = (Mean = mean_hp) + (SD  = sd_hp))) #>                             #>  |     | Horsepower       | #>  |     | Mean       SD    | #>  | cyl | mean_hp    sd_hp | #>  | --- - ---------- ----- | #>  | 4   | 91               | #>  | 4   | 81.8       21.87 | #>  | 6   | 131.67     37.53 | #>  | ... | ...        ...   |"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"renaming-columns","dir":"","previous_headings":"Introduction","what":"Renaming Columns","title":"Create basic tables with R","text":"Variable names R data.frame often technical (e.g., mean_hp sd_hp). sharing table, may want replace names. example , may want replace mean_hp sd_hp “Mean” “SD”. tablespan renaming variables achieved new_name:old_name. example, cyl ~ (Horsepower = Mean:mean_hp + SD:sd_hp) renames mean_hp Mean sd_hp SD:","code":"tablespan(data = summarized_table,           formula = cyl ~ (Horsepower = Mean:mean_hp + SD:sd_hp)) #>                             #>  |     | Horsepower       | #>  | cyl | Mean       SD    | #>  | --- - ---------- ----- | #>  | 4   | 91               | #>  | 4   | 81.8       21.87 | #>  | 6   | 131.67     37.53 | #>  | ... | ...        ...   |"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"creating-the-full-table","dir":"","previous_headings":"Introduction","what":"Creating the Full Table","title":"Create basic tables with R","text":"combination row names, spanners, renaming variables allows creating full table follows:","code":"library(dplyr) library(tablespan) data(\"mtcars\")  summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  tbl <- tablespan(data = summarized_table,                  formula = Cylinder:cyl + Engine:vs ~                    N +                    (`Horse Power` = Mean:mean_hp + SD:sd_hp) +                    (`Weight` = Mean:mean_wt + SD:sd_wt),                  title = \"Motor Trend Car Road Tests\",                  subtitle = \"A table created with tablespan\",                  footnote = \"Data from the infamous mtcars data set.\") tbl #> Motor Trend Car Road Tests #> A table created with tablespan #>                                                          #>  |                 |     Horse Power       Weight      | #>  | Cylinder Engine | N   Mean        SD    Mean   SD   | #>  | -------- ------ - --  ----------- ----- ------ ---- | #>  | 4        0      | 1   91                2.14        | #>  | 4        1      | 10  81.8        21.87 2.3    0.6  | #>  | 6        0      | 3   131.67      37.53 2.76   0.13 | #>  | ...      ...    | ... ...         ...   ...    ...  | #> Data from the infamous mtcars data set."},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"exporting-to-excel","dir":"","previous_headings":"","what":"Exporting to Excel","title":"Create basic tables with R","text":"Tables created tablespan can now translated xlsx tables openxlsx using to_excel function:","code":"# to_excel creates an openxlsx workbook wb <- to_excel(tbl = tbl)  # Save the workbook as an xlsx file: # openxlsx::saveWorkbook(wb, #                        file = \"cars.xlsx\",  #                        overwrite = TRUE)"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"styling","dir":"","previous_headings":"Exporting to Excel","what":"Styling","title":"Create basic tables with R","text":"tablespan provides limited styling options, elements can adjusted. example, may want print elements bold format numbers differently. tablespan, styling happens translating table openxlsx workbook to_excel. end, tablespan provides styles argument.","code":""},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"formatting-cells","dir":"","previous_headings":"Exporting to Excel > Styling","what":"Formatting Cells","title":"Create basic tables with R","text":"Let’s assume want mean_hp values value ≥100\\geq 100 printed bold. end, first create new style object using openxlsx: Next, create cell style tablespan: Note specify indices rows want bold column name item. Finally, pass style part list to_excel:","code":"bold <- openxlsx::createStyle(textDecoration = \"bold\") hp_ge_100 <- cell_style(rows = which(summarized_table$mean_hp >= 100),                          colnames = \"mean_hp\",                          style = bold,                         gridExpand = FALSE) # to_excel creates an openxlsx workbook wb <- to_excel(tbl = tbl,                 styles = tbl_styles(cell_styles = list(hp_ge_100)))  # Save the workbook as an xlsx file: # openxlsx::saveWorkbook(wb, #                        file = \"cars.xlsx\",  #                        overwrite = TRUE)"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"formatting-data-types","dir":"","previous_headings":"Exporting to Excel > Styling","what":"Formatting Data Types","title":"Create basic tables with R","text":"tablespan also allows formatting specific data types. Let’s assume want round doubles 3 instead default 2 digits. end, use create_data_styles function, specify (1) function checks data type want style (.double) (2) style columns match style:","code":"double_style <- create_data_styles(double = list(test = is.double,                                                   style = openxlsx::createStyle(numFmt = \"0.000\"))) wb <- to_excel(tbl = tbl, styles = tbl_styles(data_styles = double_style))  # Save the workbook as an xlsx file: # openxlsx::saveWorkbook(wb, #                        file = \"cars.xlsx\",  #                        overwrite = TRUE)"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"exporting-to-html-latex-and-rtf","dir":"","previous_headings":"","what":"Exporting to HTML, LaTeX, and RTF","title":"Create basic tables with R","text":"Tables created tablespan can also exported gt allows saving HTML, LaTeX, RTF file. end, simply call to_gt table:  gt package provides wide range functions adapt style tables. instance, opt_stylize adds pre-defined style entire table:","code":"# Translate to gt: gt_tbl <- to_gt(tbl = tbl) gt_tbl gt_tbl |>    gt::opt_stylize(style = 6,                   color = 'gray')"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"tables-without-row-names","dir":"","previous_headings":"","what":"Tables without row names","title":"Create basic tables with R","text":"Using 1 left hand side formula creates table without row names. example, 1 ~ (Horsepower = Mean:mean_hp + SD:sd_hp) defines","code":"tablespan(data = summarized_table,           formula = 1 ~ (Horsepower = Mean:mean_hp + SD:sd_hp)) #>                       #>  | Horsepower       | #>  | Mean       SD    | #>  | ---------- ----- | #>  | 91               | #>  | 81.8       21.87 | #>  | 131.67     37.53 | #>  | ...        ...   |"},{"path":"https://jhorzek.github.io/tablespan/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Create basic tables with R","text":"gt: Iannone R, Cheng J, Schloerke B, Hughes E, Lauer , Seo J, Brevoort K, Roy O (2024). gt: Easily Create Presentation-Ready Display Tables. R package version 0.11.1.9000, https://github.com/rstudio/gt, https://gt.rstudio.com. expss: Gregory D et al. (2024). expss: Tables Labels R. R package version 0.9.31, https://gdemin.github.io/expss/. tables: Murdoch D (2024). tables: Formula-Driven Table Generation. R package version 0.9.31, https://dmurdoch.github.io/tables/. openxlsx: Schauberger P, Walker (2023). openxlsx: Read, Write Edit xlsx Files. R package version 4.2.5.2, https://CRAN.R-project.org/package=openxlsx.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_footnote.html","id":null,"dir":"Reference","previous_headings":"","what":"add_gt_footnote — add_gt_footnote","title":"add_gt_footnote — add_gt_footnote","text":"Add footnote gt table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_footnote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_gt_footnote — add_gt_footnote","text":"","code":"add_gt_footnote(gt_tbl, footnote)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_footnote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_gt_footnote — add_gt_footnote","text":"gt_tbl gt table footnote footnote text","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_footnote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_gt_footnote — add_gt_footnote","text":"gt","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_rowname_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"add_gt_rowname_separator — add_gt_rowname_separator","title":"add_gt_rowname_separator — add_gt_rowname_separator","text":"Adds vertical line row names part data table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_rowname_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_gt_rowname_separator — add_gt_rowname_separator","text":"","code":"add_gt_rowname_separator(gt_tbl, right_of, separator_style)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_rowname_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_gt_rowname_separator — add_gt_rowname_separator","text":"gt_tbl great table right_of name last data column right actual data starts separator_style style vertical line separates row names data.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanner_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"add_gt_spanner_partial — add_gt_spanner_partial","title":"add_gt_spanner_partial — add_gt_spanner_partial","text":"Adds spanners left hand side right hand side headers defined tablespan table gt table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanner_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_gt_spanner_partial — add_gt_spanner_partial","text":"","code":"add_gt_spanner_partial(gt_tbl, tbl_partial)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanner_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_gt_spanner_partial — add_gt_spanner_partial","text":"gt_tbl gt table without spanners tbl_partial left right hand side header table created tablespan::tablespan","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanners.html","id":null,"dir":"Reference","previous_headings":"","what":"add_gt_spanners — add_gt_spanners","title":"add_gt_spanners — add_gt_spanners","text":"Adds spanners defined tablespan table gt table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_gt_spanners — add_gt_spanners","text":"","code":"add_gt_spanners(gt_tbl, tbl)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_spanners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_gt_spanners — add_gt_spanners","text":"gt_tbl gt table without spanners tbl table created tablespan::tablespan","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"add_gt_titles — add_gt_titles","title":"add_gt_titles — add_gt_titles","text":"Add title subtitle gt table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_gt_titles — add_gt_titles","text":"","code":"add_gt_titles(gt_tbl, title, subtitle)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_gt_titles — add_gt_titles","text":"gt_tbl gt table title title text subtitle subtitle text","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_gt_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_gt_titles — add_gt_titles","text":"gt","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":null,"dir":"Reference","previous_headings":"","what":"add_header_level — add_header_level","title":"add_header_level — add_header_level","text":"tablespan represents headers (highly) nested lists. determine level entry resides, get number root elements parent element. example, following table, x level 2, x1, x2, y1, y2 level 1:","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_header_level — add_header_level","text":"","code":"add_header_level(parsed_partial)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_header_level — add_header_level","text":"parsed_partial left hand side right hand side parsed table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_header_level — add_header_level","text":"parsed_partial additional level fields","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add_header_level — add_header_level","text":"add_header_level adds level element table header.","code":"|    x    | | x1 | x2 | y1 | y2"},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_header_level — add_header_level","text":"","code":"library(tablespan) deparsed <- tablespan:::deparse_formula(formula =  (`Row Name` = `Row 1` + `Row 2`) ~ `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)) str(deparsed) #> List of 2 #>  $ lhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 1 #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Row Name\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. .. ..$ entries  : NULL #>  $ rhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 2 #>   .. ..$ :List of 3 #>   .. .. ..$ name     : chr \"Column 1\" #>   .. .. ..$ item_name: chr \"Column 1\" #>   .. .. ..$ entries  : NULL #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Column Banner\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. .. ..$ entries  : NULL  deparsed <- tablespan:::add_header_level(deparsed$rhs) str(deparsed) #> List of 3 #>  $ name   : chr \"_BASE_LEVEL_\" #>  $ entries:List of 2 #>   ..$ :List of 4 #>   .. ..$ name     : chr \"Column 1\" #>   .. ..$ item_name: chr \"Column 1\" #>   .. ..$ entries  : NULL #>   .. ..$ level    : num 1 #>   ..$ :List of 3 #>   .. ..$ name   : chr \"Column Banner\" #>   .. ..$ entries:List of 2 #>   .. .. ..$ :List of 4 #>   .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ level    : num 1 #>   .. .. ..$ :List of 4 #>   .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ level    : num 1 #>   .. ..$ level  : num 2 #>  $ level  : num 3 deparsed$level #> [1] 3"},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":null,"dir":"Reference","previous_headings":"","what":"add_header_width — add_header_width","title":"add_header_width — add_header_width","text":"tablespan represents headers (highly) nested lists. determine wide entry header must (.e., many cells get output), get number root elements parent element spans. example, following table, x spans two elements x1 x2:","code":"|    x    | | x1 | x2 |"},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_header_width — add_header_width","text":"","code":"add_header_width(parsed_partial)"},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_header_width — add_header_width","text":"parsed_partial left hand side right hand side parsed table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_header_width — add_header_width","text":"parsed_partial additional width fields","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"add_header_width — add_header_width","text":"add_header_width adds span element table header.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/add_header_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add_header_width — add_header_width","text":"","code":"library(tablespan) deparsed <- tablespan:::deparse_formula(formula =  (`Row Name` = `Row 1` + `Row 2`) ~ `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)) str(deparsed) #> List of 2 #>  $ lhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 1 #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Row Name\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. .. ..$ entries  : NULL #>  $ rhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 2 #>   .. ..$ :List of 3 #>   .. .. ..$ name     : chr \"Column 1\" #>   .. .. ..$ item_name: chr \"Column 1\" #>   .. .. ..$ entries  : NULL #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Column Banner\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. .. ..$ entries  : NULL  deparsed <- tablespan:::add_header_width(deparsed$rhs) str(deparsed) #> List of 3 #>  $ name   : chr \"_BASE_LEVEL_\" #>  $ entries:List of 2 #>   ..$ :List of 4 #>   .. ..$ name     : chr \"Column 1\" #>   .. ..$ item_name: chr \"Column 1\" #>   .. ..$ entries  : NULL #>   .. ..$ width    : num 1 #>   ..$ :List of 3 #>   .. ..$ name   : chr \"Column Banner\" #>   .. ..$ entries:List of 2 #>   .. .. ..$ :List of 4 #>   .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ width    : num 1 #>   .. .. ..$ :List of 4 #>   .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ width    : num 1 #>   .. ..$ width  : num 2 #>  $ width  : num 3 deparsed$width #> [1] 3"},{"path":"https://jhorzek.github.io/tablespan/reference/cell_style.html","id":null,"dir":"Reference","previous_headings":"","what":"cell_style — cell_style","title":"cell_style — cell_style","text":"cell_style","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/cell_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cell_style — cell_style","text":"","code":"cell_style(rows, colnames, style, gridExpand = TRUE, stack = TRUE)"},{"path":"https://jhorzek.github.io/tablespan/reference/cell_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cell_style — cell_style","text":"rows indices rows style applied colnames names columns style applied style style created openxlsx::createStyle() applied selected cells gridExpand see ?openxlsx::addStyle: Apply style selected elements (set gridExpand = FALSE) combinations? stack style added existing styles (TRUE) overwrite existing styles (FALSE)","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/cell_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cell_style — cell_style","text":"","code":"library(tablespan) data(\"iris\")  tbl <- tablespan(data = iris[iris$Species == \"setosa\", ],           formula = Species ~ (Sepal = Sepal.Length + Sepal.Width) +             (Petal = (Width = Petal.Length) + Petal.Width))   # To apply a custom style to some elements use the styles argument. The following # applies the \"bold\" style to the rows 1-5 of the Sepal.Length column and # the rows 9-10 of the Petal.Width column. bold <- openxlsx::createStyle(textDecoration = \"bold\")  wb <- to_excel(tbl = tbl,                styles = tbl_styles(cell_styles = list(cell_style(rows = 1:5,                                                                 colnames = \"Sepal.Length\",                                                                 style = bold),                                                      cell_style(rows = 9:10,                                                                 colnames = \"Petal.Width\",                                                                 style = bold)))) # saveWorkbook(wb, \"iris.xlsx\")"},{"path":"https://jhorzek.github.io/tablespan/reference/check_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"check_variables — check_variables","title":"check_variables — check_variables","text":"Checks variables specified table formula exist data set","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/check_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_variables — check_variables","text":"","code":"check_variables(data, variables)"},{"path":"https://jhorzek.github.io/tablespan/reference/check_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_variables — check_variables","text":"data data set variables variable names formula","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/construct_header.html","id":null,"dir":"Reference","previous_headings":"","what":"construct_header — construct_header","title":"construct_header — construct_header","text":"Adds width depth (number levels) deparsed table description.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/construct_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct_header — construct_header","text":"","code":"construct_header(deparsed)"},{"path":"https://jhorzek.github.io/tablespan/reference/construct_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct_header — construct_header","text":"deparsed table formula translated nested list","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/construct_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct_header — construct_header","text":"deparsed widht levels fields","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"create_data_styles — create_data_styles","title":"create_data_styles — create_data_styles","text":"function sets defaults data_styles. See ?tbl_styles","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_data_styles — create_data_styles","text":"","code":"create_data_styles(   double = list(test = is.double, style = openxlsx::createStyle(numFmt = \"0.00\")),   integer = list(test = is.integer, style = openxlsx::createStyle(numFmt = \"0\")),   ... )"},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_data_styles — create_data_styles","text":"double style columns type double integer style columns type integer ... add styles","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create_data_styles — create_data_styles","text":"list lists styles","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create_data_styles — create_data_styles","text":"Styles applied columns data set based classes (e.g., numeric, character, etc.). data_styles must list lists. inner list must two elements: \"test\" used determine class data colum (e.g., .double) style applied columns test returns TRUE. Note styles applied order list, meaning later style may overwrite earlier style.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_data_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create_data_styles — create_data_styles","text":"","code":"library(tablespan) # Make all booleans bold: create_data_styles(boolean = list(test = is.logical,                    style = openxlsx::createStyle(textDecoration = \"bold\"))) #> $double #> $double$test #> function (x)  .Primitive(\"is.double\") #>  #> $double$style #> A custom cell style.  #>  #>  Cell formatting: \"0.00\"  #>   #>  #>  #>  #> $integer #> $integer$test #> function (x)  .Primitive(\"is.integer\") #>  #> $integer$style #> A custom cell style.  #>  #>  Cell formatting: \"0\"  #>   #>  #>  #>  #> $boolean #> $boolean$test #> function (x)  .Primitive(\"is.logical\") #>  #> $boolean$style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Font decoration: BOLD  #>   #>  #>  #>"},{"path":"https://jhorzek.github.io/tablespan/reference/create_outlines.html","id":null,"dir":"Reference","previous_headings":"","what":"create_outlines — create_outlines","title":"create_outlines — create_outlines","text":"Adds vertical horizontal bars table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/create_outlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_outlines — create_outlines","text":"","code":"create_outlines(tbl, workbook, sheet, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/create_outlines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_outlines — create_outlines","text":"tbl table created tablespan::tablespan workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"deparse_formula — deparse_formula","title":"deparse_formula — deparse_formula","text":"Translates R formula nested lists left right hand side create table rows banners. Importantly, function can parse specific subset formulas allows following grammar:","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deparse_formula — deparse_formula","text":"","code":"deparse_formula(formula)"},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deparse_formula — deparse_formula","text":"formula R formula following pattern ","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"deparse_formula — deparse_formula","text":"nested lists left hand side right hand side formula","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"deparse_formula — deparse_formula","text":"1) Braces group columns 2) Equal signs assign left hand side name multiple columns 3) plus signs combine columns","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"deparse_formula — deparse_formula","text":"","code":"library(tablespan) deparsed <- tablespan:::deparse_formula(formula =  (`Row Name` = `Row 1` + `Row 2`) ~ `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)) str(deparsed) #> List of 2 #>  $ lhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 1 #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Row Name\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. .. ..$ entries  : NULL #>  $ rhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 2 #>   .. ..$ :List of 3 #>   .. .. ..$ name     : chr \"Column 1\" #>   .. .. ..$ item_name: chr \"Column 1\" #>   .. .. ..$ entries  : NULL #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Column Banner\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. .. ..$ entries  : NULL"},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"deparse_formula_partial — deparse_formula_partial","title":"deparse_formula_partial — deparse_formula_partial","text":"Translates left right hand side R formula nested list. Importantly, function can parse specific subset formulas allows following grammar:","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"deparse_formula_partial — deparse_formula_partial","text":"","code":"deparse_formula_partial(   formula_partial,   deparsed = list(name = \"_BASE_LEVEL_\", entries = list()) )"},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"deparse_formula_partial — deparse_formula_partial","text":"formula_partial left right hand side R formula following pattern deparsed function recursive function makes use deparsed list. change manually.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"deparse_formula_partial — deparse_formula_partial","text":"nested list formula elements","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"deparse_formula_partial — deparse_formula_partial","text":"1) Braces group columns 2) Equal signs assign left hand side name multiple columns 3) plus signs combine columns","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/deparse_formula_partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"deparse_formula_partial — deparse_formula_partial","text":"","code":"library(tablespan) formula <- (`Row Name` = `Row 1` + `Row 2`) ~   `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)  deparsed <- tablespan:::deparse_formula_partial(formula_partial = formula[[2]]) str(deparsed) #> List of 2 #>  $ name   : chr \"_BASE_LEVEL_\" #>  $ entries:List of 1 #>   ..$ :List of 2 #>   .. ..$ name   : chr \"Row Name\" #>   .. ..$ entries:List of 2 #>   .. .. ..$ :List of 3 #>   .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. ..$ entries  : NULL #>   .. .. ..$ :List of 3 #>   .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. ..$ entries  : NULL"},{"path":"https://jhorzek.github.io/tablespan/reference/fill_background.html","id":null,"dir":"Reference","previous_headings":"","what":"fill_background — fill_background","title":"fill_background — fill_background","text":"Fills background table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/fill_background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fill_background — fill_background","text":"","code":"fill_background(tbl, workbook, sheet, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/fill_background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fill_background — fill_background","text":"tbl table created tablespan::tablespan workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table.html","id":null,"dir":"Reference","previous_headings":"","what":"flatten_table — flatten_table","title":"flatten_table — flatten_table","text":"table header within tables created tablespan represented highly nested lists. following function \"flattens\" list simplify implementing headers gt.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flatten_table — flatten_table","text":"","code":"flatten_table(tbl)"},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flatten_table — flatten_table","text":"tbl table created tablespan::tablespan","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flatten_table — flatten_table","text":"","code":"library(tablespan) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(\"mtcars\")  summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  tbl <- tablespan(data = summarized_table,                  formula = (LHS = Cylinder:cyl + Engine:vs) ~                    N +                    (Results = (`Horse Power` = Mean:mean_hp + SD:sd_hp) +                       (`Weight` = Mean:mean_wt + SD:sd_wt))) str(tablespan:::flatten_table(tbl)) #> List of 2 #>  $ flattened_lhs:List of 2 #>   ..$ _BASE_LEVEL_:List of 3 #>   .. ..$ level         : num 3 #>   .. ..$ children      : chr \"LHS\" #>   .. ..$ children_items: chr \"LHS\" #>   ..$ LHS         :List of 3 #>   .. ..$ level         : num 2 #>   .. ..$ children      : chr [1:2] \"Cylinder\" \"Engine\" #>   .. ..$ children_items: chr [1:2] \"cyl\" \"vs\" #>  $ flattened_rhs:List of 4 #>   ..$ _BASE_LEVEL_:List of 3 #>   .. ..$ level         : num 4 #>   .. ..$ children      : chr [1:2] \"N\" \"Results\" #>   .. ..$ children_items: chr [1:2] \"N\" \"Results\" #>   ..$ Results     :List of 3 #>   .. ..$ level         : num 3 #>   .. ..$ children      : chr [1:2] \"Horse Power\" \"Weight\" #>   .. ..$ children_items: chr [1:2] \"Horse Power\" \"Weight\" #>   ..$ Horse Power :List of 3 #>   .. ..$ level         : num 2 #>   .. ..$ children      : chr [1:2] \"Mean\" \"SD\" #>   .. ..$ children_items: chr [1:2] \"mean_hp\" \"sd_hp\" #>   ..$ Weight      :List of 3 #>   .. ..$ level         : num 2 #>   .. ..$ children      : chr [1:2] \"Mean\" \"SD\" #>   .. ..$ children_items: chr [1:2] \"mean_wt\" \"sd_wt\""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table_partial.html","id":null,"dir":"Reference","previous_headings":"","what":"flatten_table_partial — flatten_table_partial","title":"flatten_table_partial — flatten_table_partial","text":"Called tablespan:::flatten_table. Recursive function flattens left hand right hand side table headers.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table_partial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flatten_table_partial — flatten_table_partial","text":"","code":"flatten_table_partial(tbl_partial, flattened = list())"},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table_partial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flatten_table_partial — flatten_table_partial","text":"tbl_partial partial table header flattened list filled recursively","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/flatten_table_partial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flatten_table_partial — flatten_table_partial","text":"","code":"library(tablespan) library(dplyr) data(\"mtcars\")  summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  tbl <- tablespan(data = summarized_table,                  formula = (LHS = Cylinder:cyl + Engine:vs) ~                    N +                    (Results = (`Horse Power` = Mean:mean_hp + SD:sd_hp) +                       (`Weight` = Mean:mean_wt + SD:sd_wt))) str(tablespan:::flatten_table_partial(tbl$header$rhs)) #> List of 4 #>  $ _BASE_LEVEL_:List of 3 #>   ..$ level         : num 4 #>   ..$ children      : chr [1:2] \"N\" \"Results\" #>   ..$ children_items: chr [1:2] \"N\" \"Results\" #>  $ Results     :List of 3 #>   ..$ level         : num 3 #>   ..$ children      : chr [1:2] \"Horse Power\" \"Weight\" #>   ..$ children_items: chr [1:2] \"Horse Power\" \"Weight\" #>  $ Horse Power :List of 3 #>   ..$ level         : num 2 #>   ..$ children      : chr [1:2] \"Mean\" \"SD\" #>   ..$ children_items: chr [1:2] \"mean_hp\" \"sd_hp\" #>  $ Weight      :List of 3 #>   ..$ level         : num 2 #>   ..$ children      : chr [1:2] \"Mean\" \"SD\" #>   ..$ children_items: chr [1:2] \"mean_wt\" \"sd_wt\""},{"path":"https://jhorzek.github.io/tablespan/reference/get_col_data.html","id":null,"dir":"Reference","previous_headings":"","what":"get_col_data — get_col_data","title":"get_col_data — get_col_data","text":"Extracts data used row names table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_col_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_col_data — get_col_data","text":"","code":"get_col_data(data, col_variables)"},{"path":"https://jhorzek.github.io/tablespan/reference/get_col_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_col_data — get_col_data","text":"data data set col_variables variable names formula","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"get_locations — get_locations","title":"get_locations — get_locations","text":"Provides row column indices table elements.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_locations — get_locations","text":"","code":"get_locations(tbl, start_row, start_col)"},{"path":"https://jhorzek.github.io/tablespan/reference/get_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_locations — get_locations","text":"tbl table created tablespan::tablespan start_row row index table start start_col column index table start","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_locations — get_locations","text":"list locations","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_row_data.html","id":null,"dir":"Reference","previous_headings":"","what":"get_row_data — get_row_data","title":"get_row_data — get_row_data","text":"Extracts data used body table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_row_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_row_data — get_row_data","text":"","code":"get_row_data(data, row_variables)"},{"path":"https://jhorzek.github.io/tablespan/reference/get_row_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_row_data — get_row_data","text":"data data set row_variables variable names formula","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"get_variables — get_variables","title":"get_variables — get_variables","text":"Extracts variable names deparsed formula (see ?tablespan:::deparse_formula).","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_variables — get_variables","text":"","code":"get_variables(deparsed_formula)"},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_variables — get_variables","text":"deparsed_formula result tablespan:::deparse_formula","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_variables — get_variables","text":"list names variables build rows columns","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_variables — get_variables","text":"","code":"library(tablespan) deparsed <- tablespan:::deparse_formula(formula =  (`Row Name` = `Row 1` + `Row 2`) ~ `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)) str(deparsed) #> List of 2 #>  $ lhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 1 #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Row Name\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. .. ..$ entries  : NULL #>  $ rhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 2 #>   .. ..$ :List of 3 #>   .. .. ..$ name     : chr \"Column 1\" #>   .. .. ..$ item_name: chr \"Column 1\" #>   .. .. ..$ entries  : NULL #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Column Banner\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. .. ..$ entries  : NULL tablespan:::get_variables(deparsed) #> $row_variables #> [1] \"Row 1\" \"Row 2\" #>  #> $col_variables #> [1] \"Column 1\" \"Column 2\" \"Column 3\" #>"},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables_from_list.html","id":null,"dir":"Reference","previous_headings":"","what":"get_variables_from_list — get_variables_from_list","title":"get_variables_from_list — get_variables_from_list","text":"Extracts variable names left right hand side deparsed formula (see ?tablespan:::deparse_formula).","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables_from_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_variables_from_list — get_variables_from_list","text":"","code":"get_variables_from_list(deparsed_formula_element, variables = c())"},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables_from_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_variables_from_list — get_variables_from_list","text":"deparsed_formula_element left right hand side result tablespan:::deparse_formula variables function recursive fills variable vector","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables_from_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_variables_from_list — get_variables_from_list","text":"vector names variables","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/get_variables_from_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_variables_from_list — get_variables_from_list","text":"","code":"library(tablespan) deparsed <- tablespan:::deparse_formula(formula =  (`Row Name` = `Row 1` + `Row 2`) ~ `Column 1` + (`Column Banner` = `Column 2` + `Column 3`)) str(deparsed) #> List of 2 #>  $ lhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 1 #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Row Name\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 1\" #>   .. .. .. .. ..$ item_name: chr \"Row 1\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Row 2\" #>   .. .. .. .. ..$ item_name: chr \"Row 2\" #>   .. .. .. .. ..$ entries  : NULL #>  $ rhs:List of 2 #>   ..$ name   : chr \"_BASE_LEVEL_\" #>   ..$ entries:List of 2 #>   .. ..$ :List of 3 #>   .. .. ..$ name     : chr \"Column 1\" #>   .. .. ..$ item_name: chr \"Column 1\" #>   .. .. ..$ entries  : NULL #>   .. ..$ :List of 2 #>   .. .. ..$ name   : chr \"Column Banner\" #>   .. .. ..$ entries:List of 2 #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 2\" #>   .. .. .. .. ..$ item_name: chr \"Column 2\" #>   .. .. .. .. ..$ entries  : NULL #>   .. .. .. ..$ :List of 3 #>   .. .. .. .. ..$ name     : chr \"Column 3\" #>   .. .. .. .. ..$ item_name: chr \"Column 3\" #>   .. .. .. .. ..$ entries  : NULL tablespan:::get_variables_from_list(deparsed$lhs) #> [1] \"Row 1\" \"Row 2\""},{"path":"https://jhorzek.github.io/tablespan/reference/merge_rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"merge_rownames — merge_rownames","title":"merge_rownames — merge_rownames","text":"Merges consecutive rownames identical common cell.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/merge_rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"merge_rownames — merge_rownames","text":"","code":"merge_rownames(workbook, sheet, table_data, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/merge_rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"merge_rownames — merge_rownames","text":"workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written table_data data rownames actual data body table locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print.Tablespan.html","id":null,"dir":"Reference","previous_headings":"","what":"print.Tablespan — print.Tablespan","title":"print.Tablespan — print.Tablespan","text":"print.Tablespan","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print.Tablespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.Tablespan — print.Tablespan","text":"","code":"# S3 method for class 'Tablespan' print(x, digits = 2, n = 3, ...)"},{"path":"https://jhorzek.github.io/tablespan/reference/print.Tablespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.Tablespan — print.Tablespan","text":"x result tablespan digits number digits round doubles n number rows print ... additional arguments passed prmatrix","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print.Tablespan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.Tablespan — print.Tablespan","text":"nothing","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print.Tablespan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.Tablespan — print.Tablespan","text":"","code":"data(\"iris\") tbl <- tablespan(data = iris[iris$Species == \"setosa\", ],           formula = Species ~ (Sepal = Sepal.Length + Sepal.Width) +             (Petal = Petal.Length + Petal.Width)) print(tbl) #>                                                                  #>  |         | Sepal                    Petal                    | #>  | Species | Sepal.Length Sepal.Width Petal.Length Petal.Width | #>  | ------- - ------------ ----------- ------------ ----------- | #>  | setosa  | 5.1          3.5         1.4          0.2         | #>  | setosa  | 4.9          3           1.4          0.2         | #>  | setosa  | 4.7          3.2         1.3          0.2         | #>  | ...     | ...          ...         ...          ...         |"},{"path":"https://jhorzek.github.io/tablespan/reference/print_insert_header_entries.html","id":null,"dir":"Reference","previous_headings":"","what":"print_insert_header_entries — print_insert_header_entries","title":"print_insert_header_entries — print_insert_header_entries","text":"Insert header entries matrix printing.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print_insert_header_entries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print_insert_header_entries — print_insert_header_entries","text":"","code":"print_insert_header_entries(   header_partial,   max_level,   column_offset,   header_table )"},{"path":"https://jhorzek.github.io/tablespan/reference/print_insert_header_entries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print_insert_header_entries — print_insert_header_entries","text":"header_partial part header list max_level depth header list column_offset offset write data columns header_table table header entries inserted","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/print_insert_header_entries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print_insert_header_entries — print_insert_header_entries","text":"header_table entries","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":null,"dir":"Reference","previous_headings":"","what":"tablespan — tablespan","title":"tablespan — tablespan","text":"Create complex table spanners simple formula.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tablespan — tablespan","text":"","code":"tablespan(data, formula, title = NULL, subtitle = NULL, footnote = NULL)"},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tablespan — tablespan","text":"data data set formula formula create table title string specifying title table subtitle string specifying subtitle table footnote string specifying footnote table","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tablespan — tablespan","text":"Object class Tabletop title, subtitle, header info, data, footnote.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tablespan — tablespan","text":"tablespan provides formula based approach adding headers spanners existing data.frame. objective provide easy use, good enough approach building exporting tables. tablespan create summaries transform data shape form. Following tibble approach, tablespan assumes items may want use row names just columns data set (see example). , tablespan allow pick items row names just write separate section left data. table headers defined basic formula approach. example, Species ~ Sepal.Length + Sepal.Width defines table Species row names Sepal.Length Sepal.Width columns. output similar following: Note row names (Species) separate block left. can add spanner labels follows: Species ~ (Sepal = Sepal.Length + Sepal.Width) + (Petal = Sepal.Length + Sepal.Width) result output similar : can also nest spanners (e.g., Species ~ (Sepal = (Length = Sepal.Length) + (Width = Sepal.Width)). exporting tables, may want rename columns. example, may want rename Sepal.Length Petal.Length Length Sepal.Width Petal.Width Width. tablespan, can rename item header using new_name:old_name. example, Species ~ (Sepal = Length:Sepal.Length + Width:Sepal.Width) + (Petal = Length:Sepal.Length + Width:Sepal.Width) defines table similar following: Finally, create table without row names, use 1 ~ (Sepal = Length:Sepal.Length + Width:Sepal.Width) + (Petal = Length:Sepal.Length + Width:Sepal.Width) defines table similar following: Tables created tablespan can exported Excel (using openxlsx), HTML (using gt), LaTeX (using gt), RTF (unsing gt).","code":"|Species | Sepal.Length  Sepal.Width| |:-------|------------: -----------:| |setosa  |          5.1          3.5| |setosa  |          4.9          3.0| |        |           Sepal          |          Petal           | |Species | Sepal.Length| Sepal.Width| Petal.Length| Petal.Width| |:-------|------------:|-----------:|------------:|-----------:| |setosa  |          5.1|         3.5|          1.4|         0.2| |        |      Sepal     |      Petal     | |Species | Length | Width | Length | Width | |:-------|-------:|------:|-------:|------:| |setosa  |     5.1|    3.5|     1.4|    0.2| |      Sepal     |      Petal     | | Length | Width | Length | Width | |-------:|------:|-------:|------:| |     5.1|    3.5|     1.4|    0.2|"},{"path":"https://jhorzek.github.io/tablespan/reference/tablespan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tablespan — tablespan","text":"","code":"library(tablespan) library(dplyr) data(\"mtcars\")  # We want to report the following table: summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  # Create a tablespan: tbl <- tablespan(data = summarized_table,                  formula = Cylinder:cyl + Engine:vs ~                    N +                    (`Horse Power` = Mean:mean_hp + SD:sd_hp) +                    (`Weight` = Mean:mean_wt + SD:sd_wt),                  title = \"Motor Trend Car Road Tests\",                  subtitle = \"A table created with tablespan\",                  footnote = \"Data from the infamous mtcars data set.\")  tbl #> Motor Trend Car Road Tests #> A table created with tablespan #>                                                          #>  |                 |     Horse Power       Weight      | #>  | Cylinder Engine | N   Mean        SD    Mean   SD   | #>  | -------- ------ - --  ----------- ----- ------ ---- | #>  | 4        0      | 1   91                2.14        | #>  | 4        1      | 10  81.8        21.87 2.3    0.6  | #>  | 6        0      | 3   131.67      37.53 2.76   0.13 | #>  | ...      ...    | ... ...         ...   ...    ...  | #> Data from the infamous mtcars data set.  # Export as Excel table: wb <- to_excel(tbl = tbl)  # Save using openxlsx # openxlsx::saveWorkbook(wb, \"iris.xlsx\")  # Export as gt: gt_tbl <- to_gt(tbl = tbl) gt_tbl     Motor Trend Car Road Tests     A table created with tablespan     Cylinder       Engine       N                Horse Power                       Weight            Mean       SD       Mean       SD     4  0   1   91      2.14  4  1  10   81.8   21.872 2.3   0.5986  0   3  131.667 37.528 2.755 0.1286  1   4  115.25   9.179 3.389 0.1168  0  14  209.214 50.977 3.999 0.759 Data from the infamous mtcars data set."},{"path":"https://jhorzek.github.io/tablespan/reference/tbl_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"tbl_styles — tbl_styles","title":"tbl_styles — tbl_styles","text":"Define styles different elements table.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tbl_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tbl_styles — tbl_styles","text":"","code":"tbl_styles(   background_style = openxlsx::createStyle(fgFill = \"#ffffff\"),   hline_style = openxlsx::createStyle(border = \"Top\", borderColour =     openxlsx::openxlsx_getOp(\"borderColour\", \"black\"), borderStyle =     openxlsx::openxlsx_getOp(\"borderStyle\", \"double\")),   vline_style = openxlsx::createStyle(border = \"Left\", borderColour =     openxlsx::openxlsx_getOp(\"borderColour\", \"black\"), borderStyle =     openxlsx::openxlsx_getOp(\"borderStyle\", \"double\")),   title_style = openxlsx::createStyle(fontSize = 14, halign = \"left\", textDecoration =     \"bold\"),   subtitle_style = openxlsx::createStyle(fontSize = 11, halign = \"left\", textDecoration =     \"bold\"),   header_style = openxlsx::createStyle(fontSize = 11, halign = \"center\", border =     \"BottomLeftRight\", borderColour = openxlsx::openxlsx_getOp(\"borderColour\", \"black\"),     borderStyle = openxlsx::openxlsx_getOp(\"borderStyle\", \"double\"), textDecoration =     \"bold\"),   merge_rownames = TRUE,   merged_rownames_style = createStyle(valign = \"top\"),   footnote_style = openxlsx::createStyle(fontSize = 11, halign = \"left\"),   data_styles = create_data_styles(),   cell_styles = NULL )"},{"path":"https://jhorzek.github.io/tablespan/reference/tbl_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tbl_styles — tbl_styles","text":"background_style color etc. entire background table hline_style style horizontal lines used table. Note: style lines spanners defined title_style. vline_style style vertical lines used table. Note: style lines spanners defined title_style. title_style style applied table title subtitle_style style applied table subtitle header_style style applied table header (column names) merge_rownames boolean: adjacent rows identical names merged? merged_rownames_style style applied merged rownames footnote_style style applied table footnote data_styles styles applied columns data set based classes (e.g., numeric, character, etc.). data_styles must list lists. inner list must two elements: \"test\" used determine class data colum (e.g., .double) style applied columns test returns TRUE. Note styles applied order list, meaning later style may overwrite earlier style. cell_styles optional list styles selected cells data frame.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tbl_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tbl_styles — tbl_styles","text":"list styles","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/tbl_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tbl_styles — tbl_styles","text":"","code":"tbl_styles() #> $background_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Cell fill foreground: rgb: #FFFFFF  #>   #>  #>  #> $hline_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Cell borders: Top: thin  #>  Cell border colours: #000000  #>   #>  #>  #> $vline_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Cell borders: Left: thin  #>  Cell border colours: #000000  #>   #>  #>  #> $title_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Font size: 14  #>  Font decoration: BOLD  #>  Cell horz. align: left  #>   #>  #>  #> $subtitle_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Font size: 11  #>  Font decoration: BOLD  #>  Cell horz. align: left  #>   #>  #>  #> $header_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Font size: 11  #>  Font decoration: BOLD  #>  Cell borders: Bottom: thin, Left: thin, Right: thin  #>  Cell border colours: #000000, #000000, #000000  #>  Cell horz. align: center  #>   #>  #>  #> $merge_rownames #> [1] TRUE #>  #> $merged_rownames_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Cell vert. align: top  #>   #>  #>  #> $footnote_style #> A custom cell style.  #>  #>  Cell formatting: GENERAL  #>  Font size: 11  #>  Cell horz. align: left  #>   #>  #>  #> $data_styles #> $data_styles$double #> $data_styles$double$test #> function (x)  .Primitive(\"is.double\") #>  #> $data_styles$double$style #> A custom cell style.  #>  #>  Cell formatting: \"0.00\"  #>   #>  #>  #>  #> $data_styles$integer #> $data_styles$integer$test #> function (x)  .Primitive(\"is.integer\") #>  #> $data_styles$integer$style #> A custom cell style.  #>  #>  Cell formatting: \"0\"  #>   #>  #>  #>  #>  #> $cell_styles #> NULL #>"},{"path":"https://jhorzek.github.io/tablespan/reference/to_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"to_excel — to_excel","title":"to_excel — to_excel","text":"Write tablespan table excel workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/to_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"to_excel — to_excel","text":"","code":"to_excel(   tbl,   workbook = openxlsx::createWorkbook(),   sheet = \"BasicTable\",   start_row = 1,   start_col = 1,   styles = tbl_styles() )"},{"path":"https://jhorzek.github.io/tablespan/reference/to_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"to_excel — to_excel","text":"tbl table created tablespan::tablespan workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written start_row row start table start_col column start table styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/to_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"to_excel — to_excel","text":"","code":"library(tablespan) data(\"iris\")  tbl <- tablespan(data = iris[iris$Species == \"setosa\", ],           formula = Species ~ (Sepal = Sepal.Length + Sepal.Width) +             (Petal = (Width = Petal.Length) + Petal.Width))  wb <- to_excel(tbl = tbl)  # saveWorkbook(wb, \"iris.xlsx\")  # To apply a custom style to some elements use the styles argument. The following # applies the \"bold\" style to the rows 1-5 of the Sepal.Length column and # the rows 9-10 of the Petal.Width column. bold <- openxlsx::createStyle(textDecoration = \"bold\")  wb <- to_excel(tbl = tbl,                styles = tbl_styles(cell_styles = list(cell_style(rows = 1:5,                                                                 colnames = \"Sepal.Length\",                                                                 style = bold),                                                      cell_style(rows = 9:10,                                                                 colnames = \"Petal.Width\",                                                                 style = bold)))) # saveWorkbook(wb, \"iris.xlsx\")  # The main use case for tablespan is when you already have a summarized table # that you now want to share using xlsx. The following shows an example using # the dplyr package: if (require(\"dplyr\")) { # First summarize the data: summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt))  # Now, we want to create a table, where we show the grouping variables # as row names and also create spanners for the horse power (hp) and the # weight (wt) variables: tbl <- tablespan(data = summarized_table,           formula = Cylinder:cyl + Engine:vs ~             N +             (`Horse Power` = Mean:mean_hp + SD:sd_hp) +             (`Weight` = Mean:mean_wt + SD:sd_wt),           title = \"Motor Trend Car Road Tests\",           subtitle = \"A table created with tablespan\",           footnote = \"Data from the infamous mtcars data set.\")  wb <- to_excel(tbl = tbl)  # Create the excel table: # openxlsx::saveWorkbook(wb, #                        file = \"cars.xlsx\", overwrite = TRUE) } #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument."},{"path":"https://jhorzek.github.io/tablespan/reference/to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"to_gt — to_gt","title":"to_gt — to_gt","text":"Translates table created tablespan great table (gt). See https://gt.rstudio.com/.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"to_gt — to_gt","text":"","code":"to_gt(   tbl,   groupname_col = NULL,   separator_style = gt::cell_borders(sides = c(\"right\"), weight = gt::px(1), color =     \"gray\"),   auto_format = TRUE,   ... )"},{"path":"https://jhorzek.github.io/tablespan/reference/to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"to_gt — to_gt","text":"tbl table created tablespan::tablespan groupname_col Provide column names group data. See ?gt::gt details. separator_style style vertical line separates row names data. auto_format table formatted automatically? ... additional arguments passed gt::gt().","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/to_gt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"to_gt — to_gt","text":"Tablespan provide printing tables HTML table. However, to_gt, tablespan can translated great table provides html LaTeX output.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/to_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"to_gt — to_gt","text":"","code":"library(tablespan) library(dplyr) data(\"mtcars\")  summarized_table <- mtcars |>   group_by(cyl, vs) |>   summarise(N = n(),             mean_hp = mean(hp),             sd_hp = sd(hp),             mean_wt = mean(wt),             sd_wt = sd(wt)) #> `summarise()` has grouped output by 'cyl'. You can override using the `.groups` #> argument.  tbl <- tablespan(data = summarized_table,                  formula = (LHS = Cylinder:cyl + Engine:vs) ~                    N +                    (Results = (`Horse Power` = Mean:mean_hp + SD:sd_hp) +                       (`Weight` = Mean:mean_wt + SD:sd_wt)))  gt_tbl <- to_gt(tbl) print(gt_tbl) #> <div id=\"eexombwkke\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#eexombwkke table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #eexombwkke thead, #eexombwkke tbody, #eexombwkke tfoot, #eexombwkke tr, #eexombwkke td, #eexombwkke th { #>   border-style: none; #> } #>  #> #eexombwkke p { #>   margin: 0; #>   padding: 0; #> } #>  #> #eexombwkke .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #eexombwkke .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #eexombwkke .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #eexombwkke .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #eexombwkke .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #eexombwkke .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #eexombwkke .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #eexombwkke .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #eexombwkke .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #eexombwkke .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #eexombwkke .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #eexombwkke .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #eexombwkke .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #eexombwkke .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #eexombwkke .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #eexombwkke .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #eexombwkke .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #eexombwkke .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #eexombwkke .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #eexombwkke .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #eexombwkke .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #eexombwkke .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #eexombwkke .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #eexombwkke .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #eexombwkke .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #eexombwkke .gt_left { #>   text-align: left; #> } #>  #> #eexombwkke .gt_center { #>   text-align: center; #> } #>  #> #eexombwkke .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #eexombwkke .gt_font_normal { #>   font-weight: normal; #> } #>  #> #eexombwkke .gt_font_bold { #>   font-weight: bold; #> } #>  #> #eexombwkke .gt_font_italic { #>   font-style: italic; #> } #>  #> #eexombwkke .gt_super { #>   font-size: 65%; #> } #>  #> #eexombwkke .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #eexombwkke .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #eexombwkke .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #eexombwkke .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #eexombwkke .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #eexombwkke .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #eexombwkke .gt_indent_5 { #>   text-indent: 25px; #> } #>  #> #eexombwkke .katex-display { #>   display: inline-flex !important; #>   margin-bottom: 0.75em !important; #> } #>  #> #eexombwkke div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after { #>   height: 0px !important; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" scope=\"colgroup\"><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"4\" scope=\"colgroup\" id=\"Results\"> #>         <div class=\"gt_column_spanner\">Results<\/div> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"LHS\"> #>         <div class=\"gt_column_spanner\">LHS<\/div> #>       <\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"N\">N<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Horse Power\"> #>         <div class=\"gt_column_spanner\">Horse Power<\/div> #>       <\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Weight\"> #>         <div class=\"gt_column_spanner\">Weight<\/div> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cyl\">Cylinder<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"vs\">Engine<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean_hp\">Mean<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"sd_hp\">SD<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean_wt\">Mean<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"sd_wt\">SD<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"cyl\" class=\"gt_row gt_right\">4 <\/td> #> <td headers=\"vs\" class=\"gt_row gt_right\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: gray;\">0 <\/td> #> <td headers=\"N\" class=\"gt_row gt_right\"> 1 <\/td> #> <td headers=\"mean_hp\" class=\"gt_row gt_right\"> 91    <\/td> #> <td headers=\"sd_hp\" class=\"gt_row gt_right\"><br /><\/td> #> <td headers=\"mean_wt\" class=\"gt_row gt_right\">2.14 <\/td> #> <td headers=\"sd_wt\" class=\"gt_row gt_right\"><br /><\/td><\/tr> #>     <tr><td headers=\"cyl\" class=\"gt_row gt_right\">4 <\/td> #> <td headers=\"vs\" class=\"gt_row gt_right\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: gray;\">1 <\/td> #> <td headers=\"N\" class=\"gt_row gt_right\">10 <\/td> #> <td headers=\"mean_hp\" class=\"gt_row gt_right\"> 81.8  <\/td> #> <td headers=\"sd_hp\" class=\"gt_row gt_right\">21.872<\/td> #> <td headers=\"mean_wt\" class=\"gt_row gt_right\">2.3  <\/td> #> <td headers=\"sd_wt\" class=\"gt_row gt_right\">0.598<\/td><\/tr> #>     <tr><td headers=\"cyl\" class=\"gt_row gt_right\">6 <\/td> #> <td headers=\"vs\" class=\"gt_row gt_right\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: gray;\">0 <\/td> #> <td headers=\"N\" class=\"gt_row gt_right\"> 3 <\/td> #> <td headers=\"mean_hp\" class=\"gt_row gt_right\">131.667<\/td> #> <td headers=\"sd_hp\" class=\"gt_row gt_right\">37.528<\/td> #> <td headers=\"mean_wt\" class=\"gt_row gt_right\">2.755<\/td> #> <td headers=\"sd_wt\" class=\"gt_row gt_right\">0.128<\/td><\/tr> #>     <tr><td headers=\"cyl\" class=\"gt_row gt_right\">6 <\/td> #> <td headers=\"vs\" class=\"gt_row gt_right\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: gray;\">1 <\/td> #> <td headers=\"N\" class=\"gt_row gt_right\"> 4 <\/td> #> <td headers=\"mean_hp\" class=\"gt_row gt_right\">115.25 <\/td> #> <td headers=\"sd_hp\" class=\"gt_row gt_right\"> 9.179<\/td> #> <td headers=\"mean_wt\" class=\"gt_row gt_right\">3.389<\/td> #> <td headers=\"sd_wt\" class=\"gt_row gt_right\">0.116<\/td><\/tr> #>     <tr><td headers=\"cyl\" class=\"gt_row gt_right\">8 <\/td> #> <td headers=\"vs\" class=\"gt_row gt_right\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: gray;\">0 <\/td> #> <td headers=\"N\" class=\"gt_row gt_right\">14 <\/td> #> <td headers=\"mean_hp\" class=\"gt_row gt_right\">209.214<\/td> #> <td headers=\"sd_hp\" class=\"gt_row gt_right\">50.977<\/td> #> <td headers=\"mean_wt\" class=\"gt_row gt_right\">3.999<\/td> #> <td headers=\"sd_wt\" class=\"gt_row gt_right\">0.759<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://jhorzek.github.io/tablespan/reference/write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"write_data — write_data","title":"write_data — write_data","text":"Writes data body workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_data — write_data","text":"","code":"write_data(workbook, sheet, header, table_data, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_data — write_data","text":"workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written header header specification tablespan table table_data data rownames actual data body table locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_footnote.html","id":null,"dir":"Reference","previous_headings":"","what":"write_footnote — write_footnote","title":"write_footnote — write_footnote","text":"Writes footnote workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_footnote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_footnote — write_footnote","text":"","code":"write_footnote(tbl, workbook, sheet, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/write_footnote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_footnote — write_footnote","text":"tbl table created tablespan::tablespan workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_header.html","id":null,"dir":"Reference","previous_headings":"","what":"write_header — write_header","title":"write_header — write_header","text":"Writes header (column names names rownames) workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_header — write_header","text":"","code":"write_header(workbook, sheet, header, table_data, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/write_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_header — write_header","text":"workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written header header specification tablespan table table_data data rownames actual data body table locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_header_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"write_header_entry — write_header_entry","title":"write_header_entry — write_header_entry","text":"Recursive function writing header elements (column names names rownames) workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_header_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_header_entry — write_header_entry","text":"","code":"write_header_entry(   workbook,   sheet,   header_entry,   max_level,   start_row,   start_col,   header_style,   vline_style )"},{"path":"https://jhorzek.github.io/tablespan/reference/write_header_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_header_entry — write_header_entry","text":"workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written header_entry specific header enty write workbook max_level highest level header entries start_row integer specifying row write start_col integer specifying column write header_style openxlsx style header vline_style openxlsx style vertical lines header","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_title.html","id":null,"dir":"Reference","previous_headings":"","what":"write_title — write_title","title":"write_title — write_title","text":"Writes title subtitle workbook.","code":""},{"path":"https://jhorzek.github.io/tablespan/reference/write_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_title — write_title","text":"","code":"write_title(tbl, workbook, sheet, locations, styles)"},{"path":"https://jhorzek.github.io/tablespan/reference/write_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_title — write_title","text":"tbl table created tablespan::tablespan workbook Excel workbook created openxlsx::createWorkbook() sheet name sheet table written locations list overview row col locations different table elements styles openxlsx style different table elements (see ?tablespan::tbl_styles). styles element also allows applying custom styles parts data shown table body.","code":""}]
